[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = java:jboss/datasources/reunited.kickstartDS
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT h.user_pin_number FROM user_pin_history h join user u on u.user_id=h.user_pin_user_id WHERE u.user_login_id = ?
jdbcRealm.userRolesQuery = SELECT r.rolename FROM user u join user_role ur on u.user_id=ur.user_id join role r on r.role_id=ur.role_id and u.user_login_id = ?
jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT permission_name FROM ROLES_PERMISSIONS WHERE role_name = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource

jdbcRealm.authorizationCachingEnabled = false
securityManager.realms = $jdbcRealm

# Filter Setup
[urls]
/javax.faces.resource/** = anon
/login.xhtml = authc
/logout = logout
/admin/** = authc, roles[admin]
/** = authc, roles[user]